Whenever you see these boolean logic statements, you can solve them easily by this simple process:

Find an equality test (== or !=) and replace it with its truth.
Find each and/or inside parentheses and solve those first.
Find each not and invert it.
Find any remaining and/or and solve it.
When you are done you should have True or False.

AND:有一个为False,就为False
OR:有一个为True,就为True

Why does "test" and "test" return "test" or 1 and 1 return 1 instead of True?
Python and many languages like to return one of the operands to their boolean expressions rather than just True or False.
This means that if you did False and 1 you get the first operand (False) but if you do True and 1 your get the second (1).

Operator	Description	Example
==	If the values of two operands are equal, then the condition becomes true.
!=	If values of two operands are not equal, then condition becomes true.
>	If the value of left operand is greater than the value of right operand, then condition becomes true.
<	If the value of left operand is less than the value of right operand, then condition becomes true.
>=	If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.
<=	If the value of left operand is less than or equal to the value of right operand, then condition becomes true.

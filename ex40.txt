Objects are Like Import

If a class is like a "mini-module," then there has to be a similar concept to import but for classes.
That concept is called "instantiate", which is just a fancy, obnoxious, overly smart way to say "create."
When you instantiate a class what you get is called an object.

You instantiate (create) a class by calling the class like it's a function, like this:
1 thing = MyStuff()
2 thing.apple()
3 print(thing.tangerine)

The first line is the "instantiate" operation, and it's a lot like calling a function.
However, Python coordinates a sequence of events for you behind the scenes.

1 Python looks for MyStuff() and sees that it is a class you've defined.
2 Python crafts an empty object with all the functions you've specified in the class using def.
3 Python then looks to see if you made a "magic" __init__ function, and if you have it calls that
    function to initialize your newly created empty object.
4 In the MyStuff function __init__ I then get this extra variable self, which is that empty object Python
   made for me,   and I can set variables on it just like you would with a module, dictionary, or other object.
5 In this case, I set self.tangerine to a song lyric and then I've initialized this object.
6 Now Python can take this newly minted object and assign it to the thing variable for me to work with.

Classes are like blueprints or definitions for creating new mini-modules.
Instantiation is how you make one of these mini-modules and import it at the same time. "Instantiate" just means to create an object from the class.
The resulting created mini-module is called an object and you then assign it to a variable to work with it.

three ways to get things from things:

# dict style
mystuff['apples']

# module style
mystuff.apples()
print(mystuff.tangerine)

# class style
thing = MyStuff()
thing.apples()
print(thing.tangerine)
